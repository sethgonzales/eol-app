var messageInput = document.getElementById("messageInput");

// Add an event listener to the input element
messageInput.addEventListener("keyup", function(event) {
    if (event.key === "Enter") {
        // If the Enter key is pressed, trigger the button click event
        document.getElementById("sendButton").click();
    }
});




//To send private direct messages to a selected user in an MVC application using SignalR, you can modify your existing `ChatHub` and client-side JavaScript code. Here's how you can achieve this:

//1. **Update the ChatHub.cs:**

//In the `ChatHub` class, you can add a method to send private messages. The method should take the recipient's username and the message. Here's how you can modify your `ChatHub`:

//csharp
using Microsoft.AspNetCore.SignalR;
using Microsoft.AspNetCore.Identity;

public class ChatHub : Hub
{
    public async Task SendMessage(string user, string message)
    {
        await Clients.All.SendAsync("ReceiveMessage", user, message);
    }

    public async Task SendPrivateMessage(string user, string message)
    {
        // Validate that the sender and recipient are valid users in your system.
        // You can use your user management and validation logic here.

        // Send the message to the specified user only.
        await Clients.User(user).SendAsync("ReceivePrivateMessage", Context.User.Identity.Name, message);
    }

    public override async Task OnConnectedAsync()
    {
        await Clients.All.SendAsync("ReceiveMessage", "ChatBot", $"{Context.User.Identity.Name} has joined.");
    }
}


//2. *Update chat.js:**

//In your `chat.js`, you need to modify it to handle private messages. Here's an updated version:

javascript
"use strict";

var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

// Disable the send button until connection is established.
document.getElementById("sendButton").disabled = true;
document.getElementById("userInput").focus();

connection.on("ReceiveMessage", function(user, message) {
    var li = document.createElement("li");
    document.getElementById("messagesList").appendChild(li);
    li.textContent = `${ user}: ${ message}`;
});

connection.on("ReceivePrivateMessage", function(user, message) {
    // Handle incoming private messages differently.
    var li = document.createElement("li");
    document.getElementById("messagesList").appendChild(li);
    li.textContent = `Private message from ${ user}: ${ message}`;
});

connection.start().then(function() {
    document.getElementById("sendButton").disabled = false;
}).catch(function(err) {
    return console.error(err.toString());
});

document.getElementById("chat-form").addEventListener("submit", function(event) {
    event.preventDefault();
    var user = document.getElementById("userInput").value;
    var message = document.getElementById("messageInput").value;

    if (user === "all")
    {
        // Send a public message if user is "all".
        connection.invoke("SendMessage", user, message).catch(function(err) {
            return console.error(err.toString());
        });
    }
    else
    {
        // Send a private message if user is not "all".
        connection.invoke("SendPrivateMessage", user, message).catch(function(err) {
            return console.error(err.toString());
        });
    }

    document.getElementById("messageInput").value = null;
    document.getElementById("messageInput").focus();
});

//In this updated JavaScript code, we added a separate event handler for receiving private messages and modified the `SendPrivateMessage` method to send private messages to a specific user by using the `Clients.User(user).SendAsync(...)` function.

//3 **Usage in the Client:**

//To send a private message to a specific user, you can enter the username of the recipient in the "To" field in your chat interface and then type your message. The server-side logic will ensure that the message is delivered only to the specified recipient.

//Remember that you'll need to handle user validation and ensure that users are authenticated before allowing them to send or receive private messages.

//With these modifications, your SignalR chat application should be capable of sending private direct messages to selected users.


using Microsoft.AspNetCore.SignalR;
using Microsoft.AspNetCore.Identity;
using System.Collections.Generic;

namespace Eol.Hubs
{
    public class ChatHub : Hub
    {
        private static List<string> onlineUsers = new List<string>();

        public override async Task OnConnectedAsync()
        {
            string userName = Context.User.Identity.Name;
            onlineUsers.Add(userName);

            await Clients.All.SendAsync("UserConnected", userName);
            await Clients.All.SendAsync("ReceiveMessage", "ChatBot", $"{userName} has joined.");
        }

        // Your existing SendMessage and UserConnected methods...

        public override async Task OnDisconnectedAsync(Exception exception)
        {
            string userName = Context.User.Identity.Name;
            onlineUsers.Remove(userName);
            await Clients.All.SendAsync("UserDisconnected", userName);
            await base.OnDisconnectedAsync(exception);
        }
    }
}





Co - authored - by: Moshe Atia<moshikoatia@gmail.com>
Co-authored-by: Seth Gonzales<sethgonzales157@gmail.com>
Co-authored-by: Joey Palchak<joey.palchak@gmail.com>
Co-authored-by: Jake Elsberry<jelsberry96@gmail.com>"


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Eol</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Eol.styles.css" asp-append-version="true" />
</head>

<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light box-shadow mb-3" id="nav-container">
            
            <div class="card-body">
                @if (User.Identity.IsAuthenticated)
                {
                <p>Hello @User.Identity.Name!</p>
                @using(Html.BeginForm("LogOff", "Account"))
                {
                    <input type="submit" class="btn btn-primary" value="Log off" />
                }
                }
                else 
                {
                <p>@Html.ActionLink("Register New Account", "Register")</p>
                <p>@Html.ActionLink("Log In", "Login")</p>
                }
            </div>

            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">Eol.</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse"
                    aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home"
                                asp-action="Privacy">Privacy</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Account"
                                asp-action="Index">Account</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
        <main role="main">
            @RenderBody()
        </main>
    <footer class="footer">
        <div class="container">
            &copy; 1993 - EOL - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>
